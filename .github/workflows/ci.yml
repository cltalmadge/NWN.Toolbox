name: Continuous Integration

on:
  push:
    branches:
      - main
      - development
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - main
      - development
    paths-ignore:
      - '**.md'

jobs:
  compile:
    runs-on: ubuntu-20.04
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Check Line Endings
        uses: erclu/check-crlf@v1

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1.9.0
        with:
          dotnet-version: '6.0.x'

      - name: Build
        run: dotnet build --configuration Debug

      - name: Prepare Outputs
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Code Analysis Cache
        uses: actions/cache@v2
        with:
          path: ~/.local/share/JetBrains
          key: resharper-cache-${{ steps.vars.outputs.sha_short }}
          restore-keys: |
            resharper-cache-

      - name: Code Analysis
        run: dotnet tool install -g JetBrains.ReSharper.GlobalTools && jb inspectcode NWN.Toolbox.sln -o=results.xml && cat results.xml

      - name: Parse Analysis Results
        uses: glassechidna/resharper-action@master
        with:
          report: results.xml

      - name: Analysis Result
        run: |
          ! grep "<Issue TypeId=" results.xml

  test:
    runs-on: ubuntu-20.04
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1.9.0
        with:
          dotnet-version: '6.0.x'

      - name: Build
        run: dotnet build --configuration Release

      - name: Run Tests
        run: docker-compose --env-file ../../../.env up
        working-directory: NWN.Toolbox.Tests/bin/Release/

      - name: Install NUnit
        run: nuget install NUnit.Console -Version 3.12.0

      - name: Fetch transform code
        run: wget https://raw.githubusercontent.com/nunit/nunit-transforms/master/nunit3-junit/nunit3-junit.xslt
        shell: bash

      - name: Transform NUnit3 to JUnit
        run: |
            $xslt = New-Object System.Xml.Xsl.XslCompiledTransform;
            $xslt.Load("nunit3-junit.xslt");
            $xslt.Transform("NWN.Toolbox.Tests/bin/Release/results/NWN.Toolbox.Tests/TestResult.xml", "TestResult.junit.xml");
        shell: pwsh

      - name: Upload Event File
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Event File
          path: ${{ github.event_path }}

      - name: Upload Results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Test Results
          path: TestResult.junit.xml

  build:
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    needs: [compile, test]
    outputs:
      version: ${{ steps.vars.outputs.version }}
      tag: ${{ steps.vars.outputs.tag }}
      sha_short: ${{ steps.vars.outputs.sha_short }}
      image_repository: ${{ steps.vars.outputs.image_repository }}
      created: ${{ steps.build.outputs.created }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1.9.0
        with:
          dotnet-version: '6.0.x'

      - name: Tag Commit
        if: github.event.inputs.tag != ''
        run: git tag ${{ github.event.inputs.tag }} && git push origin ${{ github.event.inputs.tag }}

      - name: Prepare Outputs
        id: vars
        run: |
          if [[ "${{github.base_ref}}" == "main" || "${{github.ref}}" == "refs/heads/main" ]]; then
            echo "::set-output name=tag::$(git describe --tags)"
            echo "::set-output name=version::$(git describe --tags | sed 's/^v//')"
          else
            DESCRIBE=`git describe --tags --long`
            VERSION=`echo $DESCRIBE | awk '{split($0,a,"-"); print a[1]}'`
            META=`echo $DESCRIBE | awk '{split($0,a,"-"); print a[2]}'`
            BUILD=`echo $DESCRIBE | awk '{split($0,a,"-"); print a[3]}'`
            COMMIT=`echo $DESCRIBE | awk '{split($0,a,"-"); print a[4]}'`
            echo "::set-output name=version::$(echo ${VERSION}-${META}.${BUILD}.r${COMMIT:1} | sed 's/^v//')"
          fi
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo "::set-output name=image_repository::$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')"

      - name: Build Release Binaries
        id: build
        run: |
          dotnet build --configuration Release -p:Version=${{ steps.vars.outputs.version }}
          echo "::set-output name=created::$(echo date -u +'%Y-%m-%dT%H:%M:%SZ')"

      - name: Upload NuGet Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: NuGet Packages
          path: |
            NWN.Toolbox/bin/Release/NWN.Toolbox/*.nupkg
            NWN.Toolbox/bin/Release/NWN.Toolbox/*.snupkg
          if-no-files-found: error

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Binaries
          path: |
            NWN.Toolbox/bin/Release/NWN.Toolbox/
            !NWN.Toolbox/bin/Release/NWN.Toolbox/*.nupkg
            !NWN.Toolbox/bin/Release/NWN.Toolbox/*.snupkg
          if-no-files-found: error

  release:
    runs-on: ubuntu-20.04
    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
    needs: build
    steps:
      - name: Download Release Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Binaries
          path: binaries

      - name: Zip Binaries
        run: zip -r ../NWN.Toolbox.zip ./*
        working-directory: binaries

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_name: Release ${{ needs.build.outputs.version }}
          draft: false
          prerelease: false
          tag_name: ${{ needs.build.outputs.tag }}

      - name: Upload Release Binaries
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./NWN.Toolbox.zip
          asset_name: NWN.Toolbox.zip
          asset_content_type: application/zip

  nuget:
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    needs: build
    steps:
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1.9.0
        with:
          dotnet-version: '6.0.x'

      - name: Download Release Artifacts
        uses: actions/download-artifact@v2
        with:
          name: NuGet Packages
          path: binaries

      - name: NuGet Publish
        run: dotnet nuget push 'binaries/**/*.nupkg' --api-key ${{ secrets.NUGET_KEY }} --source https://api.nuget.org/v3/index.json

      - name: GitHub Publish
        run: dotnet nuget push 'binaries/**/*.nupkg' --api-key ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/jorteck/index.json
